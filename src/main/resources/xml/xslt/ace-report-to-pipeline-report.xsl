<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:d="http://www.daisy.org/ns/pipeline/data"
                xmlns="http://www.w3.org/1999/xhtml"
                xpath-default-namespace="http://www.w3.org/1999/xhtml"
                exclude-result-prefixes="#all"
                version="2.0">
    
    <xsl:output indent="yes"/>
    
    <xsl:param name="document-path" select="()"/>
    <xsl:param name="critical-level" select="'error'"/>  <!-- debug, info, warn, error -->
    <xsl:param name="serious-level" select="'error'"/>  <!-- debug, info, warn, error -->
    <xsl:param name="moderate-level" select="'warn'"/>  <!-- debug, info, warn, error -->
    <xsl:param name="minor-level" select="'info'"/>  <!-- debug, info, warn, error -->
    
    <xsl:template match="@* | node()" mode="#all">
        <xsl:apply-templates select="node()" mode="#current"/>
    </xsl:template>
    
    <xsl:template match="html[body/p/starts-with(string(.), 'Ace was not found')]">
        <d:document-validation-report>
            <d:document-info>
                <d:document-name><![CDATA[]]></d:document-name>
                <d:document-type>EPUB</d:document-type>
                <d:document-path>file:///test-path/</d:document-path>
                <d:error-count>0</d:error-count>
                <d:properties>
                    <d:property name="Tool Name" content="DAISY Ace"/>
                    <d:property name="EPUB packaging" content="unzipped"/>
                </d:properties>
            </d:document-info>
            <d:reports>
                <d:report type="ace">
                    <d:message severity="exception">
                        <d:desc>Ace was not found. Please check your "PATH" environment variable, or follow the installation instructions at https://daisy.github.io/ace/getting-started/installation/</d:desc>
                    </d:message>
                </d:report>
            </d:reports>
        </d:document-validation-report>
    </xsl:template>
    
    <xsl:template match="html">
        <d:document-validation-report>
            <d:document-info>
                <xsl:variable name="header-signature" select="body/header/p[starts-with(text()[1], 'Generated by DAISY Ace')]/text()[1]"/> <!-- <p class="font-italic">Generated by DAISY Ace (1.1.1) on 1.11.2021, 14:11:14</p> -->
                <xsl:variable name="tool-name" select="replace($header-signature, '^Generated by (.*) \((.*?)\) on (.*)$', '$1')"/>
                <xsl:variable name="tool-version" select="replace($header-signature, '^Generated by (.*) \((.*?)\) on (.*)$', '$2')"/>
                <xsl:variable name="timestamp" select="replace($header-signature, '^Generated by (.*) \((.*?)\) on (.*)$', '$3')"/>
                <xsl:variable name="header-title" select="body/header/p[.//text()[starts-with(., 'Title:')]]"/> <!-- <p><span class="font-weight-bold">Title:</span> Over alt p√• jord</p> -->
                <xsl:variable name="title" select="$header-title/text()[1]/normalize-space(.)"/>
                <d:document-name><xsl:value-of select="$title"/></d:document-name>
                <d:document-type>EPUB</d:document-type>
                <xsl:if test="$document-path">
                    <d:document-path><xsl:value-of select="$document-path"/></d:document-path>
                </xsl:if>
                <d:error-count>
                    <xsl:variable name="critical" select="//*[@id='violations-table']/tbody/tr[td[1]/normalize-space(lower-case(string(.))) = 'critical']"/>
                    <xsl:variable name="serious" select="//*[@id='violations-table']/tbody/tr[td[1]/normalize-space(lower-case(string(.))) = 'serious']"/>
                    <xsl:variable name="moderate" select="//*[@id='violations-table']/tbody/tr[td[1]/normalize-space(lower-case(string(.))) = 'moderate']"/>
                    <xsl:variable name="minor" select="//*[@id='violations-table']/tbody/tr[td[1]/normalize-space(lower-case(string(.))) = 'minor']"/>
                    <xsl:value-of select="sum((
                                            if ($critical-level = 'error') then count($critical) else 0,
                                            if ($serious-level = 'error') then count($serious) else 0,
                                            if ($moderate-level = 'error') then count($moderate) else 0,
                                            if ($minor-level = 'error') then count($minor) else 0
                                          ))"/>
                </d:error-count>
                <d:properties>
                    <d:property name="Tool Name" content="{$tool-name}"/>
                    <d:property name="Tool Version" content="{$tool-version}"/>
                    <xsl:if test="$document-path">
                        <d:property name="EPUB packaging" content="{if (ends-with($document-path, '/')) then 'unzipped' else 'zipped'}"/>
                    </xsl:if>
                </d:properties>
            </d:document-info>
            <d:reports>
                <d:report type="ace">
                    <xsl:for-each select="//*[@id='violations-table']/tbody/tr">
                        <xsl:variable name="impact" select="td[1]/lower-case(normalize-space(string(.)))"/>
                        <xsl:variable name="impact" select="if ($impact = 'critical') then $critical-level else
                                                            if ($impact = 'serious') then $serious-level else
                                                            if ($impact = 'moderate') then $moderate-level else
                                                            if ($impact = 'minor') then $minor-level else $impact" as="xs:string"/>
                        <xsl:variable name="ruleset" select="lower-case(normalize-space(string-join(td[2]//text(), ' ')))"/>
                        <xsl:variable name="rule" select="lower-case(normalize-space(string-join(td[3]//text(), ' ')))"/>
                        <xsl:variable name="location" select="td[4]/code[tokenize(@class, '\s+') = 'location'][1]/text()" as="xs:string?"/>
                        <xsl:variable name="snippet" select="td[4]/div[tokenize(@class, '\s+') = 'snippet'][1]/code[1]/text()" as="xs:string?"/>
                        <xsl:variable name="details" as="xs:string*">
                            <xsl:for-each select="td[5]//text()">
                                <xsl:if test="position() gt 1">
                                    <xsl:text>. </xsl:text>
                                </xsl:if>
                                <xsl:value-of select="."/>
                                <xsl:if test="parent::a">
                                    <xsl:text>: </xsl:text>
                                    <xsl:value-of select="parent::a/@href"/>
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:variable>
                        <xsl:variable name="details" select="string-join($details, '')" as="xs:string"/>
                        <d:message severity="{$impact}">
                            <d:desc><xsl:value-of select="$ruleset"/>: <xsl:value-of select="$rule"/>. <xsl:value-of select="$details"/></d:desc>
                            <xsl:if test="$location">
                                <d:file><xsl:value-of select="if (contains($location, '#')) then substring-before($location, '#') else $location"/></d:file>
                            </xsl:if>
                            <d:location href="{$location}"/>
                            <xsl:if test="$snippet">
                                <d:was><xsl:value-of select="$snippet"/></d:was>
                            </xsl:if>
                        </d:message>
                    </xsl:for-each>
                </d:report>
            </d:reports>
        </d:document-validation-report>
    </xsl:template>
    
</xsl:stylesheet>
